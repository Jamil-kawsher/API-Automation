{
	"info": {
		"_postman_id": "562250ba-49a1-42d3-954a-0ea8ba9e76af",
		"name": "Dmoney-Trnx-B5-Assignment-Jamil",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23351657"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login with out Password field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData= pm.response.json()\r",
									"\r",
									"\r",
									"pm.test(\"User Should Not able to login Without Password Field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"Password incorrect\");\r",
									"});\r",
									"pm.test(\"Status code should be 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.la\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not Login because of Incorect Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData= pm.response.json()\r",
									"var token= jsonData.token;\r",
									"pm.collectionVariables.set(\"token\",token)\r",
									"pm.environment.set(\"token\",token)\r",
									"\r",
									"pm.test(\"User can not Login because of Incorect Password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"Password incorrect\");\r",
									"});\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234856\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User try To login with Invalid Login Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData= pm.response.json()\r",
									"var token= jsonData.token;\r",
									"pm.collectionVariables.set(\"token\",token)\r",
									"pm.environment.set(\"token\",token)\r",
									"\r",
									"pm.test(\"User can Not Login beacuse of Invalid Login method\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.includes(\"PUT /user/login Not Found\");\r",
									"});\r",
									"pm.test(\"Status code is 404 not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can do login successfully Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData= pm.response.json()\r",
									"var token= jsonData.token;\r",
									"pm.collectionVariables.set(\"token\",token)\r",
									"pm.environment.set(\"token\",token)\r",
									"\r",
									"pm.test(\"User can login successfully\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"salman@grr.la\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Depost action by agent to a customer",
					"item": [
						{
							"name": "Deposit to Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer deposit is successful\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Deposit successful\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"01706614047\", \r\n    \"to_account\":\"{{customer_phone_number}}\",\r\n    \"amount\":1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Agent try to deposit to an agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Deposit from aget to agent Should  unsuccessful\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).to.not.contains(\"Deposit successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Error code should given 401 as agent to agent deposit is not permissible\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"01706614047\",\r\n    \"to_account\":\"01704223889\",\r\n    \"amount\":15\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Agent balance check",
					"item": [
						{
							"name": "Check agent balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Agent balance check should successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User balance\");\r",
											"});\r",
											"pm.test(\" 200 Should Give\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agent_phone_number}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agent_phone_number}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check agent balance for a invalid agent number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Agent balance field should not show for invalid account Number\",()=>{\r",
											"var jsonData= pm.response;\r",
											"    var message=jsonData.message;\r",
											"   \r",
											" pm.expect(message).to.not.contains(\"User balance\")\r",
											"})\r",
											"pm.test(\"Status code should be 404 not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/0171090777",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"0171090777"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check agent balance using Invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Agent balance field should not show for invalid account Number\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.error.message;\r",
											"    pm.expect(message).includes(\" Not Found\")\r",
											"})\r",
											"pm.test(\"Status code should be 404 not Found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agent_phone_number}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agent_phone_number}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Money withdrawal by Customer",
					"item": [
						{
							"name": "Money withdraw by customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer deposit is successful\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Withdraw successful\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Money withdraw by customer with Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer Withdrwal should not processed\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.error.message;\r",
											"    pm.expect(message).contains(\"PUT /transaction/withdraw Not Found\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 404 not found\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negtive Ammount Money withdraw by customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Customer Withdrwal should not processed\",()=>{\r",
											"    var jsonData= pm.response.json();\r",
											"    var message= jsonData.message;\r",
											"    pm.expect(message).contains(\"Minimum withdraw amount 10 tk\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":-50\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Customer",
					"item": [
						{
							"name": "Send Money By Customer",
							"item": [
								{
									"name": "Send money by newly created customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Send Money is successful\",()=>{\r",
													"    var jsonData= pm.response.json();\r",
													"    var message= jsonData.message;\r",
													"    pm.expect(message).to.contains(\"Send money successful\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"{{2_customer_phone_number}}\",\r\n    \"amount\":11\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transaction/sendmoney",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transaction",
												"sendmoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send money using Invalid method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Send Money Should unsuccessful as get Method For This action does not exist\",()=>{\r",
													"    var jsonData= pm.response.json();\r",
													"    var message= jsonData.error.message;\r",
													"    pm.expect(message).contains(\"GET /transaction/sendmoney Not Found\")\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 404 not found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"01686606909\",\r\n    \"amount\":50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transaction/sendmoney",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transaction",
												"sendmoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send money to a invalid user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Send Money Should unsuccessful as account does not exist\",()=>{\r",
													"    var jsonData= pm.response.json();\r",
													"    var message= jsonData.message;\r",
													"    pm.expect(message).contains(\"From/To Account does not exist\")\r",
													"})\r",
													"\r",
													"pm.test(\"Status code is 404 not found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"from_account\":\"{{customer_phone_number}}\",\r\n    \"to_account\":\"01819677097\",\r\n    \"amount\":50\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transaction/sendmoney",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transaction",
												"sendmoney"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer balance check",
							"item": [
								{
									"name": "User Try to Check customer balance with invalid method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData= pm.response.json()\r",
													"\r",
													"\r",
													"pm.test(\"User Should Not able to Check balance because of Invalid Post Method\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error.message).to.contains(\"POST /transaction/balance/\");\r",
													"});\r",
													"pm.test(\"Status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											},
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transaction/balance/{{customer_phone_number}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transaction",
												"balance",
												"{{customer_phone_number}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User Try to check customer balance  with Invalid Phone Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Customer balance field should not show for invalid account Number\",()=>{\r",
													"    var jsonData= pm.response;\r",
													"    var message=jsonData.message;\r",
													"   \r",
													" pm.expect(message).to.not.contains(\"User balance\")\r",
													"})\r",
													"pm.test(\"Status code should be 404 not Found\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											},
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transaction/balance/01778778081",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transaction",
												"balance",
												"01778778081"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check customer balance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Customer balance Check is successful\",()=>{\r",
													"    var jsonData= pm.response.json();\r",
													"    var message= jsonData.message;\r",
													"    pm.expect(message).to.contains(\"User balance\")\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											},
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transaction/balance/{{customer_phone_number}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transaction",
												"balance",
												"{{customer_phone_number}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Customer by Agent",
							"item": [
								{
									"name": "Create Customer by wrong Method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData= pm.response.json()\r",
													"\r",
													"\r",
													"pm.test(\"Agent Should Not able to create new user(customer) because of Invalid Post Method\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.error.message).to.contains(\"PUT /user/create Not Found\");\r",
													"});\r",
													"pm.test(\"Status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomId=_.random(10000,99999)\r",
													"var phoneNumber=\"0150\"+_.random(1000000,9999999)\r",
													"pm.collectionVariables.set(\"randomId\",randomId)\r",
													"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
													"\r",
													"pm.environment.set(\"randomId\",randomId)\r",
													"pm.environment.set(\"phoneNumber\",phoneNumber)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											},
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Test Customer 1\",\r\n    \"email\":\"user{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Customer\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"User should created successfully\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
													"});\r",
													"\r",
													"var jsonData= pm.response.json();\r",
													"var id= jsonData.user.id;\r",
													"var phonenumber=jsonData.user.phone_number;\r",
													"pm.collectionVariables.set(\"userId\",id)\r",
													"pm.collectionVariables.set(\"customer_phone_number\",phonenumber)\r",
													"\r",
													"pm.environment.set(\"userId\",id)\r",
													"pm.environment.set(\"customer_phone_number\",phonenumber)"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var randomId=_.random(10000,99999)\r",
													"var phoneNumber=\"0150\"+_.random(1000000,9999999)\r",
													"pm.collectionVariables.set(\"randomId\",randomId)\r",
													"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
													"\r",
													"pm.environment.set(\"randomId\",randomId)\r",
													"pm.environment.set(\"phoneNumber\",phoneNumber)"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											},
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Test Customer 1\",\r\n    \"email\":\"user{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Customer\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create 2nd Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"2nd customer created successfully\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
													"});\r",
													"\r",
													"var jsonData= pm.response.json();\r",
													"var id= jsonData.user.id;\r",
													"var phonenumber=jsonData.user.phone_number;\r",
													"pm.collectionVariables.set(\"userId2\",id)\r",
													"pm.collectionVariables.set(\"2_customer_phone_number\",phonenumber)\r",
													"\r",
													"pm.environment.set(\"userId\",id)\r",
													"pm.environment.set(\"2_customer_phone_number\",phonenumber)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randomId=_.random(10000,99999)\r",
													"var phoneNumber=\"0150\"+_.random(1000000,9999999)\r",
													"pm.collectionVariables.set(\"randomId\",randomId)\r",
													"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
													"\r",
													"pm.environment.set(\"randomId\",randomId)\r",
													"pm.environment.set(\"phoneNumber\",phoneNumber)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{token}}",
												"type": "text"
											},
											{
												"key": "X-AUTH-SECRET-KEY",
												"value": "{{secretKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\":\"Test Customer 2\",\r\n    \"email\":\"user{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Customer\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/user/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"user",
												"create"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "System Admin Action",
			"item": [
				{
					"name": "Create agent",
					"item": [
						{
							"name": "Create Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData= pm.response.json();\r",
											"var id= jsonData.user.id;\r",
											"var phonenumber=jsonData.user.phone_number;\r",
											"pm.collectionVariables.set(\"agentId\",id)\r",
											"pm.collectionVariables.set(\"agent_phone_number\",phonenumber)\r",
											"\r",
											"pm.environment.set(\"agentId\",id)\r",
											"pm.environment.set(\"agent_phone_number\",phonenumber)\r",
											"\r",
											"pm.test(\"User can login successfully\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User created successfully\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomId=_.random(10000,99999)\r",
											"var phoneNumber=\"0170\"+_.random(1000000,9999999)\r",
											"pm.collectionVariables.set(\"randomId\",randomId)\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
											"\r",
											"pm.environment.set(\"randomId\",randomId)\r",
											"pm.environment.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Test Agent 1\",\r\n    \"email\":\"agent{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Agent With out Proper Patner API Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Agent Creation without proper API Key\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"Secret auth key validation failure!\");\r",
											"});\r",
											"pm.test(\"Error code should given 401 for Create Agent as Invalid No API key is Included\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomId=_.random(10000,99999)\r",
											"var phoneNumber=\"0170\"+_.random(1000000,9999999)\r",
											"pm.collectionVariables.set(\"randomId\",randomId)\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
											"\r",
											"pm.environment.set(\"randomId\",randomId)\r",
											"pm.environment.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Test Agent 1\",\r\n    \"email\":\"agent{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Agent Creation method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Agent Creation method\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"GET /user/create Not Found\");\r",
											"});\r",
											"pm.test(\"Error code should given 408 Create Agent for Get method Does not exist\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomId=_.random(10000,99999)\r",
											"var phoneNumber=\"0170\"+_.random(1000000,9999999)\r",
											"pm.collectionVariables.set(\"randomId\",randomId)\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
											"\r",
											"pm.environment.set(\"randomId\",randomId)\r",
											"pm.environment.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Test Agent 1\",\r\n    \"email\":\"agent{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating agent with existing Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating user With existing Phone number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"User already exists\");\r",
											"});\r",
											"pm.test(\"Error code should given 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomId=_.random(10000,99999)\r",
											"var phoneNumber=\"0170\"+_.random(1000000,9999999)\r",
											"pm.collectionVariables.set(\"randomId\",randomId)\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)\r",
											"\r",
											"pm.environment.set(\"randomId\",randomId)\r",
											"pm.environment.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\":\"Test Agent 1\",\r\n    \"email\":\"agent{{randomId}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01505996819\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deposit To a Agent",
					"item": [
						{
							"name": "Deposit to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Depositing To a user\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Deposit successful\");\r",
											"});\r",
											"pm.test(\"Deposit Should Be Succes full and Created 201 Shoud Given\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"A transection Id should generate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.trnxId).to.includes(\"TXN\");\r",
											"});\r",
											"\r",
											"pm.test(\"Current balace Field shoud show\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.trnxId).to.includes(\"TXN\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "System user try To deposit with and invalid Get method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData= pm.response.json()\r",
											"\r",
											"\r",
											"pm.test(\"System User Should Not able to Deposit because of Invalid Get Method\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.contains(\"GET /transaction/deposit Not Found\");\r",
											"});\r",
											"pm.test(\"Status code should be 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit to  A Invalid Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Try To deposit money to a non existing Agent Number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Account does not exist\");\r",
											"});\r",
											"pm.test(\"Error code should given 404 not Found account\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"01778778081\",\r\n    \"amount\":1001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit Invalid(Minus) ammount to Agnet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Try To deposit -100 balace so it should not work\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.contains(\"Minimum deposit amount 10 tk\");\r",
											"});\r",
											"pm.test(\"A warning should be given that Minuse Deposit ammount is not allowed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.includes(\"Minus ammount not allowed\");\r",
											"});\r",
											"pm.test(\"Error code should given 208 Invalid action\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":-100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Customer info By Id",
					"item": [
						{
							"name": "Get Customer Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Got Customer info ', function() {\r",
											"  pm.expect(jsonData.user).to.have.property('createdAt');\r",
											"});\r",
											"\r",
											"pm.test(\"Response Code should be 200 Ok\",function(){\r",
											" pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/search?id={{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"search"
									],
									"query": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User Try to get Signle Customer Info with Invalid user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('should not contains customer data ', function() {\r",
											"  pm.expect(jsonData.user).equal(null);\r",
											"//    pm.expect(jsonData.error.message).to.contains(\"GET /transaction/deposit Not Found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response Code should be 404 not Found\",function(){\r",
											" pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/search?id=700000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"search"
									],
									"query": [
										{
											"key": "id",
											"value": "700000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User Try To get Single Customer Info by Id using Wrong (Post Method)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData= pm.response.json()\r",
											"\r",
											"\r",
											"pm.test(\"User Should Not able to get single User details because of Invalid Post Method\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error.message).to.includes(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Status code should be 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/search?id={{userId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"search"
									],
									"query": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://dmoney.professionaltrainingbd.com",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InNhbG1hbkBncnIubGEiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE2NjM1MTkxODQsImV4cCI6MTY2MzUyMDk4NH0.B-tdJsd4x5S63bFU2Tw2tpXUkJxFnVvloxOzlmAvgeU"
		},
		{
			"key": "randomId",
			"value": 35581
		},
		{
			"key": "secretKey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "userId",
			"value": 5002
		},
		{
			"key": "phone_number",
			"value": "01507700932"
		},
		{
			"key": "agentId",
			"value": 5003
		},
		{
			"key": "agent_phone_number",
			"value": "01706614047"
		},
		{
			"key": "customer_phone_number",
			"value": "01505996819"
		},
		{
			"key": "phoneNumber",
			"value": "01706614047"
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "2_customer_phone_number",
			"value": ""
		}
	]
}